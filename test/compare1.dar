// TODO @beta 带半确定状态的相对需求
class RelativeDemandWithSemiConfirm extends Demand {
  Seat? relativeSeat;
  Set<Seat>? tempRelativeTarget;
  Person? relativePerson;
  String relativePersonName;
  bool Function(
      {required Seat filteringSeat,
      required Room room,
      required Seat relativeSeat}) filter;
  RelativeDemandWithSemiConfirm(
      {required this.relativePersonName, required this.filter});

  @override
  void init(
      {required Room room, required Person demander, ChaosSystemCore? core}) {
    this.room = room;
    if (core != null) {
      this.core = core;
      var temp =
          core.personList.where((person) => relativePersonName == person.name);
      if (temp.isEmpty) {
        // TODO 处理不存在
        core.logger(
            "[错误]$demander的需求$this中指定的relativePerson:$relativePersonName不存在");
      } else {
        relativePerson = temp.first;
      }
    }
    this.demander = demander;
    target = room.getEmptySeat(source: Set.from(room.seats));
  }

  @override
  void processArranged({required ArrangedInfo arrangedInfo}) {
    if (arrangedInfo.person.name == relativePersonName) {
      (core?.logger ?? print)("[提示]$demander的相对需求$this的目标个体已确定座位，监听响应");
      relativeSeat = arrangedInfo.seat;
      target = room?.getEmptySeat(
              source: room?.findSeat((Seat seat) => filter(
                      filteringSeat: seat,
                      relativeSeat: relativeSeat!,
                      room: room!)) ??
                  {}) ??
          {};
    } else if (relativeSeat != null && target.contains(arrangedInfo.seat)) {
      target = room?.getEmptySeat(
              source: room?.findSeat((Seat seat) => filter(
                      filteringSeat: seat,
                      relativeSeat: relativeSeat!,
                      room: room!)) ??
                  {}) ??
          {};
    } else {
      target = room?.getEmptySeat(source: target) ?? {};
    }
  }

  @override
  bool update() {
    // TODO: 目前采用暴力解法 需要优化
    tempRelativeTarget ??= {};
    Set<Seat> rawSemiTarget = Set.from(target);
    if (relativePerson != null) {
      // // 判断 relativePerson.targetSet 是否不等于 tempRelativeTarget (不互为子集)
      // if (!relativePerson!.targetSet.containsAll(tempRelativeTarget!) ||
      //     !tempRelativeTarget!.containsAll(relativePerson!.targetSet)) {
      //   // 不相等 更新
      //   tempRelativeTarget = Set.from(relativePerson!.targetSet);
      // }
      tempRelativeTarget = Set.from(relativePerson!.targetSet);
    }

    if (room == null) {
      (core?.logger ?? print)("[错误]$demander的需求$this缺少room属性");
      return false;
    }
    // 更新semiTarget
    Map<Seat, int> rateMap = {for (var seat in target) seat: 0};
    for (var relativeTargetSeat in tempRelativeTarget!) {
      for (var targetSeat in target) {
        if (filter(
            filteringSeat: targetSeat,
            relativeSeat: relativeTargetSeat,
            room: room!)) {
          // 符合要求
          rateMap[targetSeat] = rateMap[targetSeat]! + 1; // 只能这样写
        }
      }
    }
    // TODO rateMap投入使用
    // 生成semiTarget
    target = {};
    rateMap.forEach((key, value) {
      if (value > 0) target.add(key);
    });
    // 判断semiTarget是否有变动
    return !target.containsAll(rawSemiTarget) ||
        !rawSemiTarget.containsAll(target);
  }

  @override
  void drawHeatmap(Set<Seat> range) {
    // TODO: 开发不均匀热图
if (relativeSeat == null) return;
    for (var seat in range) {
      if (room?.heatmap[seat] == null) continue;
      room!.heatmap[seat] = room!.heatmap[seat]! + 1 / range.length;
    }
  }

  @override
  Seat? resolve(Set<Seat> range) {
    // TODO: 融入最近理论？
    return room?.chooseBestSeat(range: range);
  }

  @override
  bool judgment(Seat finalSeat) {
    if (relativeSeat == null) {
      if (demander != null && demander!.stress >= maxStress) {
        (core?.logger ?? print)(
            "[提示]$demander选定的位置本不满足$this（监听对象还未确定位置），但迫于压力$demander只能先选择座位$filter");
        return true;
      } else {
        (core?.logger ??
            print)("[提示]$demander选定的位置不满足$this（监听对象还未确定位置），拒绝接受座位");
        return false;
      }
    } else {
      return true;
    }
  }
}
